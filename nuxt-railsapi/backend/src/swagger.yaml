openapi: 3.0.3
info:
  title: Todo API
  description: |-
    Todo管理アプリケーションのREST APIです。
    OAuth2認証を使用してユーザー認証を行い、Todoの作成、読み取り、更新、削除を行うことができます。
  version: 1.0.0
  contact:
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Health
    description: ヘルスチェックエンドポイント
  - name: Authentication
    description: 認証関連のエンドポイント
  - name: Todos
    description: Todo管理のエンドポイント
  - name: Users
    description: ユーザー管理のエンドポイント

paths:
  /health:
    get:
      tags:
        - Health
      summary: ヘルスチェック
      description: APIサーバーの健全性を確認します
      operationId: healthCheck
      responses:
        '200':
          description: サーバーは正常に動作しています
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK

  /oauth/token:
    post:
      tags:
        - Authentication
      summary: OAuth2トークン取得
      description: |-
        OAuth2のトークンを取得します。
        クライアントクレデンシャルまたはパスワードグラントフローを使用できます。
      operationId: getToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [password, client_credentials, refresh_token]
                  description: グラントタイプ
                  example: password
                username:
                  type: string
                  description: ユーザー名（メールアドレス）- passwordグラント時に必要
                  example: user@example.com
                password:
                  type: string
                  description: パスワード - passwordグラント時に必要
                  example: password123
                client_id:
                  type: string
                  description: クライアントID
                client_secret:
                  type: string
                  description: クライアントシークレット
                refresh_token:
                  type: string
                  description: リフレッシュトークン - refresh_tokenグラント時に必要
                scope:
                  type: string
                  description: スコープ（オプション）
              required:
                - grant_type
      responses:
        '200':
          description: トークン取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: リクエストが不正です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証に失敗しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: 現在のユーザー情報取得
      description: アクセストークンから現在のユーザー情報を取得します
      operationId: getCurrentUser
      security:
        - oauth2: []
      responses:
        '200':
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    format: email
                    example: john@example.com
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/revoke:
    post:
      tags:
        - Authentication
      summary: トークンの無効化
      description: 現在のアクセストークンを無効化します
      operationId: revokeToken
      security:
        - oauth2: []
      responses:
        '200':
          description: トークンの無効化に成功しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token revoked successfully
        '400':
          description: トークンが提供されていません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/todos:
    get:
      tags:
        - Todos
      summary: Todo一覧取得
      description: Todoの一覧をページネーション付きで取得します
      operationId: listTodos
      security:
        - oauth2: []
      parameters:
        - name: page
          in: query
          description: ページ番号（1から開始）
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: count
          in: query
          description: 1ページあたりの件数
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        '200':
          description: Todo一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Todos
      summary: Todo作成
      description: 新しいTodoを作成します
      operationId: createTodo
      security:
        - oauth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  maxLength: 100
                  description: Todoのタイトル
                  example: Buy groceries
                description:
                  type: string
                  maxLength: 500
                  description: Todoの詳細説明
                  example: Milk, eggs, bread
                completed:
                  type: boolean
                  description: 完了状態
                  default: false
                  example: false
      responses:
        '201':
          description: Todo作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: リクエストが不正です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/todos/{id}:
    get:
      tags:
        - Todos
      summary: Todo詳細取得
      description: 指定されたIDのTodoを取得します
      operationId: getTodo
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          description: TodoのID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Todo取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todoが見つかりません
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Todo not found

    put:
      tags:
        - Todos
      summary: Todo更新（完全更新）
      description: 指定されたIDのTodoを更新します（PUT）
      operationId: updateTodoPut
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          description: TodoのID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 100
                  description: Todoのタイトル
                  example: Buy groceries
                description:
                  type: string
                  maxLength: 500
                  description: Todoの詳細説明
                  example: Milk, eggs, bread, cheese
                completed:
                  type: boolean
                  description: 完了状態
                  example: true
      responses:
        '200':
          description: Todo更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: リクエストが不正です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todoが見つかりません
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Todo not found
        '422':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    patch:
      tags:
        - Todos
      summary: Todo更新（部分更新）
      description: 指定されたIDのTodoを部分的に更新します（PATCH）
      operationId: updateTodoPatch
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          description: TodoのID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 100
                  description: Todoのタイトル
                  example: Buy groceries
                description:
                  type: string
                  maxLength: 500
                  description: Todoの詳細説明
                  example: Milk, eggs, bread, cheese
                completed:
                  type: boolean
                  description: 完了状態
                  example: true
      responses:
        '200':
          description: Todo更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: リクエストが不正です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todoが見つかりません
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Todo not found
        '422':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

    delete:
      tags:
        - Todos
      summary: Todo削除
      description: 指定されたIDのTodoを削除します
      operationId: deleteTodo
      security:
        - oauth2: []
      parameters:
        - name: id
          in: path
          description: TodoのID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Todo削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo deleted successfully
        '401':
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todoが見つかりません
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Todo not found

components:
  securitySchemes:
    oauth2:
      type: oauth2
      description: OAuth2認証フロー
      flows:
        password:
          tokenUrl: /oauth/token
          scopes: {}
        clientCredentials:
          tokenUrl: /oauth/token
          scopes: {}

  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
          description: TodoのID
          example: 1
        title:
          type: string
          description: Todoのタイトル
          maxLength: 100
          example: Buy groceries
        description:
          type: string
          description: Todoの詳細説明
          maxLength: 500
          nullable: true
          example: Milk, eggs, bread
        completed:
          type: boolean
          description: 完了状態
          default: false
          example: false
        created_at:
          type: string
          format: date-time
          description: 作成日時
          example: '2025-10-07T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          description: 更新日時
          example: '2025-10-07T12:00:00Z'
      required:
        - id
        - title
        - completed
        - created_at
        - updated_at

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          description: 現在のページ番号
          example: 1
        per_page:
          type: integer
          description: 1ページあたりの件数
          example: 20
        total_pages:
          type: integer
          description: 総ページ数
          example: 5
        total_count:
          type: integer
          description: 総件数
          example: 100
        next_page:
          type: integer
          nullable: true
          description: 次のページ番号（存在しない場合はnull）
          example: 2
        prev_page:
          type: integer
          nullable: true
          description: 前のページ番号（存在しない場合はnull）
          example: null
      required:
        - current_page
        - per_page
        - total_pages
        - total_count

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: アクセストークン
          example: 'abcdef1234567890'
        token_type:
          type: string
          description: トークンタイプ
          example: Bearer
        expires_in:
          type: integer
          description: トークンの有効期限（秒）
          example: 7200
        refresh_token:
          type: string
          description: リフレッシュトークン
          example: 'xyz9876543210'
        scope:
          type: string
          description: スコープ
          example: public
        created_at:
          type: integer
          description: トークン作成日時（UNIXタイムスタンプ）
          example: 1696680000
      required:
        - access_token
        - token_type
        - expires_in
        - created_at

    Error:
      type: object
      properties:
        error:
          type: string
          description: エラーメッセージ
          example: Invalid credentials
        error_description:
          type: string
          description: エラーの詳細説明
          example: The provided credentials are invalid

    ValidationError:
      type: object
      properties:
        errors:
          type: array
          description: バリデーションエラーメッセージの配列
          items:
            type: string
          example:
            - "Title can't be blank"
            - "Title is too long (maximum is 100 characters)"

    User:
      type: object
      properties:
        id:
          type: integer
          description: ユーザーID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: John Doe
        email:
          type: string
          format: email
          description: メールアドレス
          example: john@example.com
        created_at:
          type: string
          format: date-time
          description: 作成日時
          example: '2025-10-07T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          description: 更新日時
          example: '2025-10-07T12:00:00Z'
      required:
        - id
        - email
        - created_at
        - updated_at
